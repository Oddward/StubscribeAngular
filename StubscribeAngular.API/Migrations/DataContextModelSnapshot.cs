// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StubscribeAngular.API.Data;

namespace StubscribeAngular.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("StubscribeAngular.API.Models.Colour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Colours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            name = "white"
                        },
                        new
                        {
                            Id = 2,
                            name = "yellow"
                        },
                        new
                        {
                            Id = 3,
                            name = "blue"
                        },
                        new
                        {
                            Id = 4,
                            name = "purple"
                        },
                        new
                        {
                            Id = 5,
                            name = "silver"
                        },
                        new
                        {
                            Id = 6,
                            name = "brown"
                        },
                        new
                        {
                            Id = 7,
                            name = "green"
                        });
                });

            modelBuilder.Entity("StubscribeAngular.API.Models.Member", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("balance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("colour")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("StubscribeAngular.API.Models.SubCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Music streaming"
                        },
                        new
                        {
                            id = 2,
                            name = "Video streaming"
                        },
                        new
                        {
                            id = 3,
                            name = "Food delivery"
                        },
                        new
                        {
                            id = 4,
                            name = "Transportation"
                        },
                        new
                        {
                            id = 5,
                            name = "Courses"
                        },
                        new
                        {
                            id = 6,
                            name = "Telecommunication"
                        });
                });

            modelBuilder.Entity("StubscribeAngular.API.Models.SubService", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("logo_loc")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("SubServices");

                    b.HasData(
                        new
                        {
                            id = 1,
                            CategoryId = 1,
                            name = "Spotify"
                        },
                        new
                        {
                            id = 2,
                            CategoryId = 2,
                            name = "Netflix"
                        },
                        new
                        {
                            id = 3,
                            CategoryId = 2,
                            name = "Youtube Premium"
                        },
                        new
                        {
                            id = 4,
                            CategoryId = 6,
                            name = "Uni-fi"
                        });
                });

            modelBuilder.Entity("StubscribeAngular.API.Models.Subscription", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlanTypeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("datetime_created")
                        .HasColumnType("TEXT");

                    b.Property<string>("datetime_next_renewal")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<float>("price")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("StubscribeAngular.API.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("default_card")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("pass")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StubscribeAngular.API.Models.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("StubscribeAngular.API.Models.Member", b =>
                {
                    b.HasOne("StubscribeAngular.API.Models.Subscription", "Subscription")
                        .WithMany("Members")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
